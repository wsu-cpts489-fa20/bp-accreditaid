{"version":3,"sources":["images/wsu-logo-white.png","AppMode.js","components/common/NavBar.js","components/common/SideMenu.js","components/common/ModeBar.js","components/LoginPage/ConfirmDeleteAccount.js","components/LoginPage/CreateEditAccountDialog.js","components/LoginPage/ResetPasswordDialog.js","components/LoginPage/LookUpAccountDialog.js","components/LoginPage/SecurityQuestionDialog.js","components/LoginPage/LoginPage.js","components/common/Placeholder.js","components/FeedPage/FeedPage.js","components/RoundsPage/ConfirmDeleteRound.js","components/RoundsPage/RoundsTable.js","components/RoundsPage/RoundForm.js","components/common/FloatingButton.js","components/RoundsPage/Rounds.js","components/CoursesPage/CoursesForm.js","components/CoursesPage/CoursesTable.js","components/CoursesPage/Courses.js","components/common/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","COURSES_LOGCOURSE","COURSES_EDITCOURSE","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","logo","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","accountType","url","accountName","console","log","JSON","stringify","create","fetch","headers","method","body","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","Placeholder","FeedPage","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","fontStyle","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","CoursesForm","handleNewCourseChange","courseName","courseNumber","coursePrefix","courseCredits","coursePrerequisites","courseSOs","courseDeliverables","courseInstructor","courseEmail","existingCourse","alert","marginTop","marginBottom","CoursesTable","editCourse","deleteCourse","showConfirm","toggleConfirm","prevState","p","courses","number","prefix","credits","prerequisites","sos","deliverables","instructor","Courses","AboutBox","textAlign","modeTitle","modeToPage","App","newMode","handleChangeMode","openMenu","closeMenu","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.791e7cbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wsu-logo-white.16be3b3b.png\";","/* AppMode: The enumerated type for AppMode. */\n\nconst AppMode = {\n    LOGIN: \"LoginMode\",\n    FEED: \"FeedMode\",\n    ROUNDS: \"RoundsMode\",\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\n    COURSES: \"CoursesMode\",\n    COURSES_LOGCOURSE: \"CoursesMode-LogCourse\",\n    COURSES_EDITCOURSE: \"CoursesMode-EditCourse\",\n};\n\nObject.freeze(AppMode); //This ensures that the object is immutable.\n\nexport default AppMode;","import React from 'react';\nimport logo from '../../images/wsu-logo-white.png'\nimport AppMode from '../../AppMode';\n\nclass NavBar extends React.Component {\n\n  getMenuBtnIcon = () => {\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \n          this.props.mode === AppMode.ROUNDS_EDITROUND ||\n          this.props.mode === AppMode.COURSES_LOGCOURSE ||\n          this.props.mode === AppMode.COURSES_EDITCOURSE)\n          return \"fa fa-arrow-left\";\n      if (this.props.menuOpen)\n        return \"fa fa-times\";\n      return \"fa fa-bars\";\n  }\n\n  handleMenuBtnClick = () => {\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\n      this.props.changeMode(AppMode.ROUNDS);\n    } else if (this.props.mode === AppMode.COURSES_LOGCOURSE ||\n        this.props.mode === AppMode.COURSES_EDITCOURSE) {\n      this.props.changeMode(AppMode.COURSES);\n    } else if (this.props.mode != AppMode.LOGIN) {\n      this.props.toggleMenuOpen();\n    }\n  }\n\n    \n  render() {\n    return (\n    <div className=\"navbar\">  \n    <span className=\"navbar-items\">\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\n        </span>\n      </button>\n      <img className=\"wsu-logo\" src={logo} alt=\"WSU Logo\" height=\"38px\"\n      width=\"38px\"/>\n      <span className=\"navbar-title\">\n        &nbsp;{this.props.title}\n      </span>\n    </span>\n  </div>\n); \n}\n}\n\nexport default NavBar;\n","import React from 'react';\nimport AppMode from '../../AppMode.js'\n\nclass SideMenu extends React.Component {\n\n//renderModeItems -- Renders correct subset of mode menu items based on\n//current mode, which is stored in this.prop.mode. Uses switch statement to\n//determine mode.\nrenderModeMenuItems = () => {\n  switch (this.props.mode) {\n    case AppMode.FEED:\n      return(\n        <div>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\n        <a className=\"sidemenu-item \">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\n        </div>\n      );\n    break;\n    case AppMode.ROUNDS:\n      return(\n        <div>\n          <a className=\"sidemenu-item\">\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\n          <a className=\"sidemenu-item\">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\n        </div>\n      );\n    break;\n    case AppMode.COURSES:\n      return(\n        <div>\n        <a className=\"sidemenu-item\"\n            onClick={() => this.props.changeMode(AppMode.COURSES_LOGCOURSE)}>\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\n        <a className=\"sidemenu-item\">\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\n        </div>\n      );\n    default:\n        return null;\n    }\n}\n\n    render() {\n       return (\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\n             onClick={this.props.toggleMenuOpen}>\n          {/* SIDE MENU TITLE */}\n          <div className=\"sidemenu-title\">\n            <img src={this.props.profilePicURL} height='60' width='60' />\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\n        </div>\n          {/* MENU CONTENT */}\n          {this.renderModeMenuItems()}\n          {/* The following menu items are present regardless of mode */}\n          {this.props.localAccount ? \n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\n        </div>\n       );\n    }\n}\n\nexport default SideMenu;\n","import React from 'react';\nimport AppMode from '../../AppMode.js';\n\n\nclass ModeBar extends React.Component {\n    render() {\n      return(\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\n          <span className=\"modebaricon fa fa-th-list\"></span>\n          <span className=\"modebar-text\">Feed</span>\n        </a>\n        <a className={(this.props.mode === AppMode.ROUNDS || \n               this.props.mode === AppMode.ROUNDS_EDITROUND || \n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                  \" item-selected\" : null)}\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\n          <span className=\"modebar-icon  fa fa-history\"></span>\n          <span className=\"modebar-text\">Rounds</span>\n        </a>\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\n          <span className=\"modebar-icon  fa fa-flag\"></span>\n          <span className=\"modebar-text\">Courses</span>\n        </a> \n        </div>\n      );\n    }\n}\n\nexport default ModeBar;\n","import React from 'react';\n\nclass ConfirmDeleteAccount extends React.Component {\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {emailMatches: false};\n    }\n    \n    componentDidMount() {\n        this.emailRef.current.focus();\n    }\n\n    handleChange = () => {\n        const match = (this.emailRef.current.value === this.props.email);\n        if (match != this.state.emailMatches) {\n            this.setState({emailMatches: match});\n        }\n    }\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete your account? <br />\n                 <i>This action cannot be undone.</i></p>\n              <label>\n                Confirm Email ({this.props.email}):\n                <br/>\n                <input \n                    className=\"form-center\"\n                    type=\"text\"\n                    ref={this.emailRef}\n                    onChange={this.handleChange} />\n                </label>\n                <br />\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\n                  Yes, Delete My Account</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteAccount;","import React from 'react';\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\n\nclass CreateEditAccountDialog extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.origAccountInfo = null;\n        //Create a ref for the email input DOM element\n        this.newUserRef = React.createRef();\n        this.repeatPassRef = React.createRef();\n        this.profilePicRef = React.createRef();\n        this.state = {accountName: \"\",\n                      displayName: \"\",\n                      password: \"\",\n                      accountType: \"Instructor\",\n                      passwordRepeat: \"\",\n                      securityQuestion: \"\",\n                      securityAnswer: \"\",\n                      formUpdated: false,\n                      confirmDelete: false};\n    } \n\n    //componentDidMount -- If we are editing an existing user account, we need to grab the data from\n    //the database and push them into the state.\n    async componentDidMount() {\n        if (!this.props.create) {\n            //obtain current user data from database and push into state\n            const url = \"/api/users/\" + this.props.userId;\n            const res = await fetch(url);\n            const json = await res.json();\n            const userData = JSON.parse(json);\n            this.origAccountInfo = userData; //This determines whether update can occur\n            this.origAccountInfo.passwordRepeat = userData.password;\n            this.setState({accountName: this.props.userId,\n                           displayName: userData.displayName,\n                           profilePicURL: userData.profilePicURL,\n                           password: userData.password,\n                           passwordRepeat: userData.password,\n                           securityQuestion: userData.securityQuestion,\n                           securityAnswer: userData.securityAnswer});\n        }\n    }\n\n    //checkDataValidity -- Callback function invoked after a form element in\n    //the 'Create Account' dialog box changes and component state has been\n    //updated. We first check whether the passwords match. If they do not, \n    //we set a custom validity message to be displayed when the user clicks the\n    //'Create Account' button. Otherwise, we reset the custom validity message\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\n    //Second, we check whether anything in the form changed from the original.\n    //If so, we update the 'formUpdated' state var, so that the form's submit\n    //button is enabled.\n    checkDataValidity = () => {\n        if (this.state.password != this.state.passwordRepeat) {\n            //Passwords don't match\n            this.repeatPassRef.current.setCustomValidity(\n            \"This password must match password entered in previous field.\");\n        } else {\n            this.repeatPassRef.current.setCustomValidity(\"\");\n        }\n    }\n\n    //handleChange--Called when a field in a dialog box form changes.\n    handleChange = (event) => {\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\n        if (event.target.name === \"profilePic\") {\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\n                               formUpdated: formUpdated},\n                               this.checkDataValidity);\n            } else { //The user selected a file\n                const self = this;\n                const reader = new FileReader();\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\n                reader.addEventListener(\"load\",function() {\n                    self.setState({profilePicURL:  this.result,\n                                   formUpdated: formUpdated},this.checkDataValidity);\n                });\n                \n            }\n        } else {\n            this.setState({[event.target.name]: event.target.value,\n                           formUpdated: formUpdated},this.checkDataValidity);\n        }\n    } \n\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\n    //true since this.origAccountInfo is set to null.\n    //Should be called whenever the user makes a change to form data.\n    formIsUpdated = (updateField,updateVal) => {\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\n        if (updateField != \"displayName\" && \n             this.state.displayName != this.origAccountInfo.displayName) \n             {return true;}\n        if (updateField != \"profilePicURL\" && \n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \n             {return true;}\n        if (updateField != \"password\" &&\n            this.state.password !== this.origAccountInfo.password)\n            {return true;}\n        if (updateField != \"passwordRepeat\" &&\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\n            {return true;}\n        if (updateField != \"securityQuestion\" &&\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\n            {return true;}\n        if (updateField != \"securityAnswer\" &&\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\n            {return true;}\n        return false;\n    }\n\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\n    //Sets default value of display name to value entered into Email field \n    //as a courtesy.\n    setDefaultDisplayName = (event) => {\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\n        this.setState({displayName: event.target.value});\n      }\n    }\n\n    //handleSubmit -- Triggered when user clicks on submit button to\n    //either create or edit account.\n    //Custom data checking ensures user account under this email does not \n    //already exist and that the rest of the info is valid. We create a new  \n    // object for user, save it to localStorage and take user to app's \n    //landing page. \n    handleSubmit = async(event) => {\n        event.preventDefault();\n        //Initialize user account\n        let userData = {\n            displayName: this.state.displayName,\n            password: this.state.password,\n            accountType: this.state.accountType,\n            securityQuestion: this.state.securityQuestion,\n            securityAnswer: this.state.securityAnswer\n        };\n        const url = '/api/users/' + this.state.accountName;\n        let res;\n        console.log(\"User data\", JSON.stringify(userData));\n        if (this.props.create) { //use POST route to create new user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'POST',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\n            } else { //Unsuccessful account creation\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        } else { //use PUT route to update existing user account\n            res = await fetch(url, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                    },\n                method: 'PUT',\n                body: JSON.stringify(userData)}); \n            if (res.status == 200) { //successful account creation!\n                this.props.done(\"User Account Updated!\",false);\n            } else { //Unsuccessful account update\n                //Grab textual error message\n                const resText = await res.text();\n                this.props.done(resText,false);\n            }\n        }\n    }\n\n    //deleteAccount -- Called after confirms account deletion. \n    //Uses DELETE server route to perform server deletion. \n    //Calls on done with status message and\n    //true if delete was successful, false otherwise.\n    deleteAccount = async() => {\n       const url = '/api/users/' + this.state.accountName;\n       const res = await fetch(url, \n                    {method: 'DELETE'}); \n        if (res.status == 200) { //successful account deletion!\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\n        } else { //Unsuccessful account deletion\n            //Grab textual error message\n            const resText = await res.text();\n            this.props.done(resText,false);\n        }\n        this.setState({confirmDelete: false});\n    }\n\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\n    //button to indicate intention to delete account. Presents the Confirm\n    //Delete dialog box.\n    confirmDeleteAccount = (e) => {\n        e.preventDefault();\n        this.setState({confirmDelete: true});\n    }\n\n    render() {\n    return (  \n    <div className=\"modal\" role=\"dialog\">\n    <div className=\"modal-dialog modal-lg\"></div>\n        <div className=\"modal-content form-center\">\n            <div className=\"modal-header\">\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\n              <button className=\"modal-close\" \n                       onClick={this.props.cancel}>\n                &times;</button>\n            </div>\n            <div className=\"modal-body\">\n            <form onSubmit={this.handleSubmit}>\n            <label>\n                Email: \n                <input  \n                autocomplete=\"off\"\n                disabled={!this.props.create}\n                className=\"form-control form-text form-center\"\n                name=\"accountName\"\n                type=\"email\"\n                size=\"35\"\n                placeholder=\"Enter Email Address\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                ref={this.newUserRef}\n                value={this.state.accountName}\n                onChange={this.handleChange}\n                onBlur={this.setDefaultDisplayName}\n                />\n            </label>\n            <br/>\n            <label>\n                Password:\n                <input\n                autocomplete=\"off\"\n                className=\"form-control form-text form-center\"\n                name=\"password\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Enter Password\"\n                pattern=\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                required={true}\n                value={this.state.password}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Repeat Password:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"passwordRepeat\"\n                type=\"password\"\n                size=\"35\"\n                placeholder=\"Repeat Password\"\n                required={true}\n                ref={this.repeatPassRef}\n                value={this.state.passwordRepeat}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Display Name:\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"displayName\"\n                type=\"text\"\n                size=\"30\"\n                placeholder=\"Display Name\"\n                required={true}\n                value={this.state.displayName}\n                onChange={this.handleChange}\n                />\n            </label>\n            <select name=\"type\" value={this.state.type} className=\"form-control form-center\" onChange={this.handleChange}>\n                <option value=\"Instructor\">Instructor</option>\n                <option value=\"ABET Evaluator\">ABET Evaluator</option>\n                <option value=\"College Admin\">College Admin</option>\n            </select> \n            <br/>\n            <label>\n                Profile Picture:<br/>\n                <input\n                className=\"form-control form-text form-center\"\n                name=\"profilePic\"\n                type=\"file\"\n                accept=\"image/x-png,image/gif,image/jpeg\" \n                ref={this.profilePicRef}\n                value={this.state.profilePic}\n                onChange={this.handleChange}\n                />\n                <img src={this.state.profilePicURL != \"\" ? \n                            this.state.profilePicURL :\n                            this.state.profilePicDataURL} \n                        height=\"60\" width=\"60\" \n                 />\n            </label> \n            <br/>\n            <label>\n                Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"securityQuestion\"\n                size=\"35\"\n                placeholder=\"Security Question\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityQuestion}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            <label>\n                Answer to Security Question:\n                <textarea\n                className=\"form-control form-text form-center\"\n                name=\"securityAnswer\"\n                type=\"text\"\n                placeholder=\"Answer\"\n                rows=\"2\"\n                cols=\"35\"\n                maxLength=\"100\"\n                required={true}\n                value={this.state.securityAnswer}\n                onChange={this.handleChange}\n                />\n            </label>\n            <br/>\n            {!this.props.create ?  \n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\n                Delete Account...\n            </button> : null}\n            <br/><br/>\n            <button role=\"submit\" \n                disabled={!this.state.formUpdated}\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\n            </button>\n            </form>\n            </div>\n        </div>\n        {this.state.confirmDelete ? \n          <ConfirmDeleteAccount email={this.state.accountName}\n                                deleteAccount={this.deleteAccount}\n                                close={() => (this.setState({confirmDelete: false}))}\n         /> : null}\n    </div>\n    );\n}\n}\n\nexport default CreateEditAccountDialog;","import React from 'react'\n\nclass ResetPasswordDialog extends React.Component {\n    constructor() {\n        super();\n        this.resetPasswordRef = React.createRef();\n        this.resetPasswordRepeatRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\n    //If so, call on resetPassword in parent component to actually reset the password.\n    //Otherwise, display an error message prompting the user to try again.\n    handleSubmit= (event) => {\n        event.preventDefault();\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\n            this.props.resetPassword(this.resetPasswordRef.current.value);\n        } else {\n            this.resetPasswordRepeatRef.current.focus();\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\n        }\n    }\n\n    checkForSubmit = (e) => {\n        if (e.code === \"Enter\") {\n            e.preventDefault();\n            this.handleSubmit();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Enter new password\"\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\n                        className=\"form-control form-text\"\n                        ref={this.resetPasswordRef}\n                        />\n                    </label>\n                    <label>\n                        Repeat New Password: \n                        <input\n                        type=\"password\"\n                        placeholder=\"Repeat new password\"\n                        className=\"form-control form-text\"\n                        onKeyUp={this.checkForSubmit}\n                        ref={this.resetPasswordRepeatRef}\n                        />\n                    </label>\n                    <button role=\"submit\" \n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );\n        \n    }\n}\n\nexport default ResetPasswordDialog;","import React from 'react';\nimport AppMode from '../../AppMode.js';\n\nclass LookUpAccountDialog extends React.Component {\n\n    constructor() {\n        super();\n        this.emailRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\n    //button, we check whether the account exists. If it does, we update the state,\n    //setting the resetEmail var to the email entered, hiding the current dialog box\n    //and showing the security question dialog box.\n    handleLookUpAccount = async(event) => {\n        event.preventDefault();\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\n        if (response.status == 200) {\n            const json = await response.json();\n            const obj = JSON.parse(json);\n            if (obj.authStrategy === \"local\") {\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\n            } else { //Account exists but was created through OAuth so password can't be reset \n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\n            }\n        } else {\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\n                    <button className=\"modal-close\" \n                        onClick={() => {this.props.cancelResetPassword()}}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\n                    <form onSubmit={this.handleLookUpAccount}>\n                    <label>\n                        Account Email Address: \n                        <input\n                        ref={this.emailRef}\n                        className=\"form-control form-text\"\n                        type=\"email\"\n                        size=\"35\"\n                        placeholder=\"Enter Email Address\"\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                        ref={this.emailRef}\n                        required={true}\n                        />\n                    </label>\n                    <button type=\"submit\" \n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>  \n        );   \n    }\n\n}\n\nexport default LookUpAccountDialog;\n","import React from 'react';\n\nclass SecurityQuestionDialog extends React.Component {\n    constructor() {\n        super();\n        this.securityAnswerRef = React.createRef();\n        this.state = {errorMsg: \"\"};\n    }\n\n    //Focus cursor in email secrity answer field when mounted\n    componentDidMount() {\n        this.securityAnswerRef.current.focus();\n    }  \n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.securityAnswerRef.current.value === this.props.answer) {\n            this.props.getNewPassword();\n        } else {\n            this.securityAnswerRef.current.focus();\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" role=\"dialog\">\n              <div className=\"modal-dialog modal-lg\">\n                <div className=\"modal-content\">\n                  <div className=\"modal-header\">\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\n                    </h3>\n                    <button className=\"modal-close\" \n                        onClick={this.props.cancelResetPassword}>\n                        &times;\n                    </button>\n                  </div>\n                  <div className=\"modal-body\">\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \n                    <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Security Question: \n                        <textarea\n                        readOnly={true}\n                        value={this.props.question}\n                        className=\"form-control form-text\"\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <label>\n                        Security Answer: \n                        <textarea\n                        className=\"form-control form-text\"\n                        placeholder=\"Enter Security Question Answer\"\n                        ref={this.securityAnswerRef}\n                        rows=\"3\"\n                        cols=\"35\"\n                        />\n                    </label>\n                    <button role=\"submit\" \n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\n                    </button>\n                    </form>\n                </div>\n              </div>\n            </div>\n          </div>\n          );        \n    }\n}\n export default SecurityQuestionDialog;","import React from 'react';\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\n\nclass LoginPage extends React.Component {\n\nconstructor() {\n    super();\n    //Create a ref for the email input DOM element\n    this.emailInputRef = React.createRef();\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.passwordInputRef = React.createRef();\n    this.state = {statusMsg: \"\",\n                  loginBtnIcon: \"fa fa-sign-in\",\n                  loginBtnLabel: \"Log In\",\n                  showLookUpAccountDialog: false,\n                  showSecurityQuestionDialog: false,\n                  showResetPaswordDialog: false,\n                  githubIcon: \"fa fa-github\",\n                  githubLabel: \"Sign in with GitHub\",\n                  loginMsg: \"\",\n                  newAccountCreated: false\n                  };\n} \n    \n//Focus cursor in email input field when mounted\ncomponentDidMount() {\n    this.emailInputRef.current.focus();\n}  \n\n//handleLoginSubmit -- Called when user clicks on login button.\nhandleLoginSubmit = async (event) => {\n    event.preventDefault();\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\n                   loginBtnLabel: \"Logging In...\"});\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\n                \"&password=\" + this.passwordInputRef.current.value;\n    const res = await fetch(url, {method: 'POST'}); \n    if (res.status == 200) { //successful login!\n        window.open(\"/\",\"_self\");\n    } else { //Unsuccessful login\n      const resText = await res.text();\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\n                     loginBtnLabel: \"Log In\",\n                     statusMsg: resText});\n    }\n}\n\n  //accountCreateDone -- Called by child CreateAccountDialog component when \n  //user attempted to create new account. Hide the dialog and display \n  //a message indicating result of the attempt.\n  accountCreateDone = (msg) => {\n      this.setState({statusMsg: msg,\n                     showCreateAccountDialog: false});\n  }\n\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\n  cancelCreateAccount = () => {\n      this.setState({showCreateAccountDialog: false});\n  }\n\n//cancelResetPassword -- Called by one of the child three child dialog box components when\n//the user decides to cancel resetting their password. Toggles state so that all three\n//of the dialog boxes are hidden\ncancelResetPassword = () => {\n    this.resetUserId = \"\";\n    this.resetQ = \"\";\n    this.resetA = \"\";\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: false,\n                   showResetPaswordDialog: false});             \n}\n\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\n//provider\nhandleOAuthLogin = (provider) => {\n    window.open(`/auth/${provider}`,\"_self\");\n}\n\n//handleOAuthLoginClick -- Called whent the user clicks on button to\n//authenticate via a third-party OAuth service. The name of the provider is\n//passed in as a parameter.\nhandleOAuthLoginClick = (provider) => {\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\n                  [provider + \"Label\"] : \"Connecting...\"});\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\n}\n\n//getSecurityAnswer: Given the id, security question, and security answer obtained\n//from the LookUpAccountDialog component, update state such that the user will\n//next be prompted to enter security question and answer for verification\ngetSecurityAnswer = (userId, question, answer) => {\n    this.resetUserId = userId;\n    this.resetQ = question;\n    this.resetA = answer;\n    this.setState({showLookUpAccountDialog: false,\n                   showSecurityQuestionDialog: true\n                });\n}\n\n//getNewPassword-- Called after user successfully provides correct answer\n//to security question. Presents the \"Reset Password\" dialog box.\ngetNewPassword = () => {\n    this.setState({showSecurityQuestionDialog: false,\n                    showResetPaswordDialog: true});\n}\n\n//resetPassword--Called after the user successfully enters a new (acceptable)\n//password. pw contains the new password. Call on the Update (PUT) server\n//route to update the user's password in the database.\nresetPassword = async(pw) => {\n    const url = \"/users/\" + this.resetUserId;\n    const res = await fetch(url, {\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n            },\n        method: 'PUT',\n        body: JSON.stringify({password: pw})}); \n    if (res.status == 200) { //successful update creation!\n        this.setState({showResetPaswordDialog: false,\n                       statusMsg: \"Password successfully reset!\"});\n    } else { //Unsuccessful account creation\n        //Grab textual error message\n        const resText = await res.text();\n        this.setState({showResetPasswordDialog: false,\n                      statusMsg: resText});\n    }\n    \n}\n\n//newAccountCreated -- Called after successful creation of a new account\naccountCreateDone = (msg,deleted) => {\n    this.setState({statusMsg: msg,\n                   showCreateAccountDialog: false});\n}\n\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\ncloseStatusMsg = () => {\n    this.setState({statusMsg: \"\"});\n}\n\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\ncancelCreateAccount = () => {\n    this.setState({showCreateAccountDialog: false});\n}\n\n  render() {\n    return(\n        <div>\n        <center>\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n            {this.state.showLookUpAccountDialog ? \n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\n            {this.state.showSecurityQuestionDialog ? \n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\n                                       question={this.resetQ}\n                                       answer={this.resetA}\n                                       getNewPassword={this.getNewPassword}/> : null}\n            {this.state.showResetPaswordDialog ? \n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\n                                   resetPassword={this.resetPassword} /> : null}\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\n                Email:\n                <input\n                ref={this.emailInputRef}\n                className=\"form-control login-text\"\n                type=\"email\"\n                placeholder=\"Enter Email Address\"\n                id=\"emailInput\"\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                required={true}\n                />\n            </label>\n            <p />\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\n                Password:\n                <input\n                ref={this.passwordInputRef}\n                className=\"form-control login-text\"\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\n                required={true}\n                />\n            </label>\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\n            <button\n                type=\"submit\"\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\n                &nbsp;{this.state.loginBtnLabel}\n            </button>\n            <p>\n            <button type=\"button\" className=\"btn btn-link login-link\" \n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\n                Create an account</button> | \n                <button type=\"button\" className=\"btn btn-link login-link\"\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\n                Reset your password</button>\n            </p>  \n            <button type=\"button\" className=\"btn btn-github\"\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\n              <span className={this.state.githubIcon}></span>&nbsp;\n                {this.state.githubLabel}\n            </button>\n            <p>\n                <i>Version CptS 489</i>\n            </p>\n            </form>\n            {this.state.showCreateAccountDialog ? \n              <CreateEditAccountDialog\n                create={true} \n                done={this.accountCreateDone}\n                cancel={this.cancelCreateAccount} /> : null}\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\n        </center>\n        </div>\n        )\n    }\n} \n\nexport default LoginPage;\n","import React from 'react';\n\nclass Placeholder extends React.Component {\n\n    render() {\n        return (\n        <div className=\"padded-page\">\n            <center>\n            <h1 > Placeholder </h1>\n            <h2>This page is under construction.</h2>\n            <img src=\"https://brand.wsu.edu/wp-content/themes/brand/images/pages/logos/wsu-signature-vertical.svg\" />\n            </center>\n        </div>\n        );\n    }\n}\n\nexport default Placeholder;","import React from 'react';\nimport Placeholder from '../common/Placeholder.js'\n\nclass FeedPage extends React.Component {\n\n    render() {\n        return (\n            <Placeholder/>\n        );\n    }\n}\n\nexport default FeedPage;","import React from 'react';\n\nclass ConfirmDeleteRound extends React.Component {\n\n    render() {\n        return (\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\n        <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <center>\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\n              </center>\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\n                 &times;</button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Do you really want to delete this round?</p>\n            </div>\n            <div className=\"modal-footer\">\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\n                  Yes, Delete</button>\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\n                  No, Cancel</button>\n            </div>\n        </div>\n        </div>\n        );\n    }\n}\n\nexport default ConfirmDeleteRound;","import React from 'react';\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\nimport AppMode from '../../AppMode.js';\n\nclass RoundsTable extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {showConfirmDelete: false};\n  }\n\n  //editRound -- Triggered when the user clicks the edit button for a given\n  //round. The id param is the unique property that identifies the round.\n  //Set the state variable representing the id of the round to be edited and\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\n  //chosen round.\n  editRound = (id) => {\n    this.props.setEditId(id);\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\n  }\n\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\n  //button in the Confirm Delete dialog box. It executes the deletion and\n  //closes the dialog box.\n  deleteRound = () => {\n    this.props.deleteRound();\n    this.setState({showConfirmDelete: false});\n  }\n\n\n  //confirmDelete -- Triggered when the user clicks the delete button\n  //for a given round. The id paam is the unique property that \n  //identifies the round. Set the state variable representing the id\n  //of the round to be deleted and then present a dialog box asking\n  //the user to confirm the deletion.\n  confirmDelete = (id) => {\n    this.props.setDeleteId(id);\n    this.setState({showConfirmDelete: true});\n  }\n\n\n  //renderTable -- render an HTML table displaying the rounds logged\n  //by the current user and providing buttons to view/edit and delete each round.\n  renderTable = () => {\n  let table = [];\n  for (let r = 0; r < this.props.rounds.length; ++r) {\n    table.push(\n      <tr key={r}>\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\n        <td>{this.props.rounds[r].course}</td>\n        <td>{(Number(this.props.rounds[r].strokes) + \n              Number(this.props.rounds[r].minutes)) +\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \n                \"0\" + this.props.rounds[r].seconds :\n                this.props.rounds[r].seconds) + \" (\" + \n              this.props.rounds[r].strokes + \n              \" in \" + this.props.rounds[r].minutes + \":\" + \n              (this.props.rounds[r].seconds < 10 ?  \n                \"0\" + this.props.rounds[r].seconds :\n                this.props.rounds[r].seconds) + \")\"}\n        </td>\n        <td><button onClick={this.props.menuOpen ? null : () => \n          this.editRound(r)}>\n              <span className=\"fa fa-eye\"></span></button></td>\n        <td><button onClick={this.props.menuOpen ? null : \n          () => this.confirmDelete(r)}>\n              <span className=\"fa fa-trash\"></span></button></td>\n      </tr> \n    );\n  }\n  return table;\n  }\n\n  //render--render the entire rounds table with header, displaying a \"No\n  //Rounds Logged\" message in case the table is empty.\n  render() {\n    return(\n    <div className=\"padded-page\">\n      <h1></h1>\n      <table className=\"table table-hover\">\n        <thead className=\"thead-light\">\n        <tr>\n          <th>Date</th>\n          <th>Course</th>\n          <th>Score</th>\n          <th>View/Edit...</th>\n          <th>Delete</th>\n        </tr>\n        </thead>\n        <tbody>\n          {Object.keys(this.props.rounds).length === 0 ? \n          <tr>\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\n          </tr> : this.renderTable()\n          }\n        </tbody>\n      </table>\n      {this.state.showConfirmDelete ?\n        <ConfirmDeleteRound \n          close={() => this.setState({showConfirmDelete: false})} \n          deleteRound={this.deleteRound} /> : null}\n    </div>\n    );\n  }\n}\n\nexport default RoundsTable;\n","import React from 'react';\nimport AppMode from '../../AppMode.js';\n\nclass RoundForm extends React.Component {\n  constructor(props) {\n  super(props);\n  //Create date object for today, taking time zone into consideration\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\n  //store date as ISO string\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\n    //If logging a new round, the starting state is a default round with\n    //today's date.\n    this.state = {date:  today.toISOString().substr(0,10), \n                  course: \"\",\n                  type: \"practice\",\n                  holes: \"18\",\n                  strokes: 80,\n                  minutes: 50,\n                  seconds: \"00\",\n                  notes: \"\",\n                  faIcon: \"fa fa-save\",\n                  btnLabel: \"Save Round Data\"}\n  } else {\n    //if editing an existing round, the starting state is the round's\n    //current data\n    let thisRound = {...this.props.startData};\n    delete thisRound.id;\n    thisRound.faIcon = \"fa fa-edit\";\n    thisRound.btnLabel = \"Update Round Data\";\n    this.state = thisRound;\n  }\n}\n  \n  \n    handleChange = (event) => {\n        const name = event.target.name;\n        if (name === \"seconds\") {\n          let newSec = (event.target.value.length < 2 ? \"0\" + \n            event.target.value : event.target.value);\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \n                                       newSec);\n          this.setState({seconds: newSec, SGS: newSGS});\n        } else if (name === \"strokes\") {\n          let newStrokes = event.target.value;\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \n            this.state.seconds);\n          this.setState({strokes: newStrokes, SGS: newSGS});\n        } else if (name === \"minutes\") {\n            let newMin = event.target.value;\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \n              this.state.seconds);\n            this.setState({minutes: newMin, SGS: newSGS});\n        } else {\n          this.setState({[name]: event.target.value});\n        }\n    }\n  \n  \n    //handleSubmit -- When the user clicks on the button to save/update the\n    //round, start the spinner and invoke the parent component's saveRound\n    //method to do the actual work. Note that saveRound is set to the correct\n    //parent method based on whether the user is logging a new round or editing\n    //an existing round.\n    handleSubmit = (event) => {\n        //start spinner\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \n                                    \"Saving...\" : \"Updating...\")});\n        //Prepare current round data to be saved\n        let roundData = this.state;\n        delete roundData.faIcon;\n        delete roundData.btnLabel;\n        //call saveRound on 1 second delay to show spinning icon\n        setTimeout(this.props.saveRound,1000,roundData); \n        event.preventDefault(); \n        }\n  \n\n    computeSGS = (strokes, min, sec) => {\n      return (Number(strokes) + Number(min)) \n                  + \":\" + sec;\n    }\n  \n    render() {\n      return (\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\n          <center>\n            <label>\n              Date:\n              <input name=\"date\" className=\"form-control form-center\" \n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\n            </label>\n            <p></p>\n            <label>\n              Course:\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\n                value={this.state.course} onChange={this.handleChange}\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\n            </label>\n          <p></p>\n          <label>Type:\n          <select name=\"type\" value={this.state.type} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"practice\">Practice</option>\n            <option value=\"tournament\">Tournament</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Holes:\n          <select name=\"holes\" value={this.state.holes} \n            className=\"form-control form-center\" onChange={this.handleChange}>\n            <option value=\"9\">9</option>\n            <option value=\"18\">18</option>\n          </select> \n          </label>\n          <p></p>\n          <label># Strokes:\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \n            min=\"9\" max=\"200\" value={this.state.strokes} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Time: <br></br>\n          <input name=\"minutes\" type=\"number\" size=\"3\"\n            min=\"10\" max=\"400\" value={this.state.minutes}\n            onChange={this.handleChange} />:  \n          <input name=\"seconds\" type=\"number\" size=\"2\"\n            min=\"0\" max=\"60\" value={this.state.seconds} \n            onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <label>Speedgolf Score: <br></br>\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\n          </label>\n          <p></p>\n          <label>Notes:\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \n                placeholder=\"Enter round notes\" value={this.state.notes} \n                onChange={this.handleChange} />\n          </label>\n          <p></p>\n          <p></p>\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \n            className=\"btn btn-primary btn-color-theme\">\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\n          </button>\n          </center>\n        </form>\n      );\n    }\n}\n\nexport default RoundForm;","import React from 'react';\n\nclass FloatingButton extends React.Component {\n    render() {\n      return(\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\n        </div>  \n      );\n    }\n}\n\nexport default FloatingButton;\n","//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from '../../AppMode.js';\nimport RoundsTable from './RoundsTable.js';\nimport RoundForm from './RoundForm.js';\nimport FloatingButton from '../common/FloatingButton.js';\n\nclass Rounds extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor() {\n        super();\n        this.deleteId = \"\";\n        this.editId = \"\";\n        this.state = {errorMsg: \"\"};           \n    }\n\n    //addRound -- Given an object newData containing a new round, use the \n    //server POST route to add the new round to the database. If the add is\n    //successful, call on the refreshOnUpdate() method to force the parent\n    //App component to refresh its state from the database and re-render itself,\n    //allowing the change to be propagated to the Rounds table. Then switch\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.setState({errorMsg: \"\"});\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round in the database. \n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.editId]._id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\n    deleteRound = async () => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.deleteId]._id;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \n            + msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }  \n    }\n \n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.deleteId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.editId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    closeErrorMsg = () => {\n        this.setState({errorMsg: \"\"});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        switch(this.props.mode) {\n            case AppMode.ROUNDS:\n                return (\n                    <>\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n                    <RoundsTable \n                        rounds={this.props.userObj.rounds}\n                        setEditId={this.setEditId}\n                        setDeleteId={this.setDeleteId}\n                        deleteRound={this.deleteRound}\n                        changeMode={this.props.changeMode}\n                        menuOpen={this.props.menuOpen} /> \n                    <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} />\n                    </>\n                );\n            case AppMode.ROUNDS_LOGROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.ROUNDS_EDITROUND:\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\n                thisRound.date = thisRound.date.substr(0,10);\n                if (thisRound.seconds < 10) {\n                    thisRound.seconds = \"0\" + thisRound.seconds;\n                } \n                delete thisRound.SGS;\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={thisRound} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Rounds;\n","import React from 'react';\nimport AppMode from '../../AppMode.js';\n\nclass CoursesForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        if (this.props.mode === AppMode.COURSES_LOGCOURSE) {\n            this.state = {\n                        courseName: \"\",\n                        courseNumber: \"\",\n                        coursePrefix: \"\",\n                        courseCredits: \"\",\n                        coursePrerequisites: \"\",\n                        courseSOs: \"\",\n                        courseDeliverables: \"\",\n                        courseInstructor: \"\",\n                        courseEmail: \"\",\n                        faIcon: \"fa fa-save\",\n                        btnLabel: \"Save Course\"\n                        };\n        } else {\n            let existingCourse = {...this.props.startData};\n            existingCourse.faIcon = \"fa fa-edit\";\n            existingCourse.btnLabel = \"Update Course\";\n            this.state = existingCourse;\n        }\n    }\n\n    handleNewCourseChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});  \n    } \n\n    render() {\n        return (\n            <div>\n                <form onSubmit={() => alert(\"course added!\")}>\n                    <center>\n                        <label>\n                            Course Name:\n                            <input\n                            className=\"form-control form-text form-center\"\n                            name=\"Name\"\n                            type=\"text\"\n                            placeholder=\"Name\"\n                            required={true}                \n                            onChange={this.handleNewCourseChange}\n                            />\n                        </label>\n                        <p></p>\n                        <label>\n                            Course Number:\n                            <input\n                            className=\"form-control form-text form-center\"\n                            name=\"Number\"\n                            type=\"text\"\n                            placeholder=\"Number\"\n                            required={true}                \n                            onChange={this.handleNewCourseChange}\n                            />\n                        </label>\n                        <p></p>\n                        <label>\n                            Course Prefix:\n                            <input\n                            className=\"form-control form-text form-center\"\n                            name=\"Prefix\"\n                            type=\"text\"\n                            placeholder=\"Prefix\"\n                            required={true}                \n                            onChange={this.handleNewCourseChange}\n                            />\n                        </label>\n                        <p></p>\n                        <label>\n                            Number of Credits:\n                            <input\n                            className=\"form-control form-text form-center\"\n                            name=\"Credits\"\n                            type=\"text\"\n                            placeholder=\"Credits\"\n                            required={true}                \n                            onChange={this.handleNewCourseChange}\n                            />\n                        </label>\n                        <p></p>\n                        <label>\n                            Course Prerequisites:\n                            <input\n                            className=\"form-control form-text form-center\"\n                            name=\"Prerequisites\"\n                            type=\"text\"\n                            placeholder=\"Prerequisites\"\n                            required={true}                \n                            onChange={this.handleNewCourseChange}\n                            />\n                        </label>\n                        <p></p>\n                        <label>\n                            Course SOs:\n                            <input\n                            className=\"form-control form-text form-center\"\n                            name=\"SOs\"\n                            type=\"text\"\n                            placeholder=\"SOs\"\n                            required={true}                \n                            onChange={this.handleNewCourseChange}\n                            />\n                        </label>\n                        <p></p>\n                        <label>\n                            Course Deliverables:\n                            <input\n                            className=\"form-control form-text form-center\"\n                            name=\"Deliverables\"\n                            type=\"text\"\n                            placeholder=\"Deliverables\"\n                            required={true}               \n                            onChange={this.handleNewCourseChange}\n                            />\n                        </label>\n                        <p></p>\n                        <label>\n                            Instructor Name:\n                            <input\n                            className=\"form-control form-text form-center\"\n                            name=\"Deliverables\"\n                            type=\"text\"\n                            placeholder=\"Deliverables\"\n                            required={true}               \n                            onChange={this.handleNewCourseChange}\n                            />\n                        </label>\n                        <p></p>\n                        <label>\n                            Instructor Email: \n                            <input\n                            className=\"form-control form-text form-center\"\n                            name=\"accountName\"\n                            type=\"email\"\n                            size=\"35\"\n                            placeholder=\"Enter Email Address\"\n                            pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\n                            required={true}\n                            onChange={this.handleNewCourseChange}\n                            />\n                        </label>\n                        <br/>\n                        <button role=\"submit\" \n                            className=\"btn btn-primary btn-color-theme modal-submit-btn\"\n                            style={{marginTop: \"15px\", marginBottom: \"70px\"}}>\n                            <span className=\"fa fa-user-plus\"></span>&nbsp;Add Course\n                        </button>\n                    </center>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default CoursesForm;","import React from 'react';\nimport AppMode from '../../AppMode.js';\n\nclass CoursesTable extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {showConfirm: false};\n    }\n\n    editCourse = (id) => {\n        this.props.setEditId(id);\n        this.props.changeMode(AppMode.COURSES_EDITCOURSE);\n    }\n\n    confirmDelete = () => {\n        this.props.deleteCourse();\n        this.setState({showConfirm: false});\n    }\n\n    toggleConfirm = (id) => {\n        this.props.setDeleteId(id);\n        this.setState(prevState => ({showConfirm: !prevState.showConfirm}));\n    }\n\n    renderTable = () => {\n        let table = [];\n        for (let p = 0; p < this.props.courses.length; ++p) {\n            table.push(\n                <tr key={p}>\n                    <td>{this.props.courses[p].name}</td>\n                    <td>{this.props.courses[p].number}</td>\n                    <td>{this.props.courses[p].prefix}</td>\n                    <td>{this.props.courses[p].credits}</td>\n                    <td>{this.props.courses[p].prerequisites}</td>\n                    <td>{this.props.courses[p].sos}</td>\n                    <td>{this.props.courses[p].deliverables}</td>\n                    <td>{this.props.courses[p].instructor}</td>\n                    <td>{this.props.courses[p].email}</td>\n                    <td>\n                        <button \n                            onClick={this.props.menuOpen ? null : () => \n                            this.editCourse(p)}>\n                            <span className=\"fa fa-eye\"></span>\n                        </button>\n                    </td>\n                </tr> \n            );\n        }\n        return table;\n    }\n\n    render() {\n        return (\n        <div>\n            <table className=\"table table-hover\">\n                <thead className=\"thead-light\">\n                    <tr>\n                    <th>Course Name</th>\n                    <th>Number</th>\n                    <th>Prefix</th>\n                    <th>Credits</th>\n                    <th>Prerequisites</th>\n                    <th>SOs</th>\n                    <th>Deliverables</th>\n                    <th>Instructor</th>\n                    <th>Email</th>\n                    <th>View/Edit...</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td colSpan=\"10\" style={{fontStyle: \"italic\"}}>\n                            No courses added\n                        </td>\n                    </tr> \n                </tbody>\n            </table>\n        </div>\n        );\n    }\n}\n\nexport default CoursesTable;\n","import React from 'react';\nimport AppMode from '../../AppMode.js';\nimport CoursesForm from './CoursesForm.js';\nimport CoursesTable from './CoursesTable.js';\nimport FloatingButton from '../common/FloatingButton.js';\n\nclass Courses extends React.Component {\n\n    render() {\n        switch(this.props.mode) {\n            case AppMode.COURSES:\n                return (\n                    <>\n                        <CoursesTable/>\n                        <FloatingButton\n                            handleClick={() => \n                                this.props.changeMode(AppMode.COURSES_LOGCOURSE)}\n                            menuOpen={this.props.menuOpen}\n                            icon={\"fa fa-plus\"}\n                        />\n                    </>\n                );\n            case AppMode.COURSES_LOGCOURSE:\n                return (\n                    <>\n                        <CoursesForm/>\n                    </>\n                );\n            case AppMode.COURSES_EDITCOURSE:\n                return (\n                    <>\n                        <CoursesForm/>\n                    </>\n                );\n        }\n    }\n}\n\nexport default Courses;","import React from 'react';\n\nclass AboutBox extends React.Component {\n\nrender() {\n    return (\n        <div className=\"modal\" role=\"dialog\">\n        <div className=\"modal-dialog modal-lg\">\n            <div className=\"modal-content\">\n            <div className=\"modal-header\">\n                <h3>About AcreditAid app</h3>\n                <button className=\"modal-close\" onClick={this.props.close}>\n                    &times;\n                </button>\n            </div>\n            <div className=\"modal-body\">\n                <img\n                src=\"https://brand.wsu.edu/wp-content/themes/brand/images/pages/logos/wsu-signature-vertical.svg\"\n                height=\"200\" width=\"200\"/>\n                <p>Version CptS 489 Fa20 Complete (MERN)</p>\n                <div style={{textAlign: \"left\"}}>\n                    <p> University degree programs typically seek accreditation from a recognized accreditation board. By ensuring that the degree program meets a set of established standards, such accreditation gives a degree program credibility in the eyes of the potential employers of its graduates. </p>\n                    <p> The AccreditAid application is intended to help university degree programs manage the process of acquiring ABET accreditation. There are at least three processes that can be facilitated through AccreditAid: </p>\n                    <ul>\n                        <li> Collecting and presenting display materials for each required course in a degree program. </li>\n                        <li> Identifying student work samples for assessment in targeted courses and facilitating the collaborative process of assessing those work samples against targeted SOs; </li>\n                        <li> Collecting, managing and analyzing additional sources of assessment data. </li>\n                    </ul>\n                </div>\n            </div>\n            <div className=\"modal-footer\">\n                <button className=\"btn btn-primary btn-color-theme\"\n                onClick={this.props.close}>OK</button>\n                </div>\n            </div>\n        </div>\n        </div>\n    );\n    }\n}\n\nexport default AboutBox;","import React from 'react';\nimport NavBar from './common/NavBar.js';\nimport SideMenu from './common/SideMenu.js';\nimport ModeBar from './common/ModeBar.js';\nimport CreateEditAccountDialog from './LoginPage/CreateEditAccountDialog.js'\nimport LoginPage from './LoginPage/LoginPage.js';\nimport AppMode from \"./../AppMode.js\"\nimport FeedPage from './FeedPage/FeedPage.js';\nimport Rounds from './RoundsPage/Rounds.js';\nimport Courses from './CoursesPage/Courses.js';\nimport AboutBox from './common/AboutBox.js';\n\nconst modeTitle = {};\nmodeTitle[AppMode.LOGIN] = \"Welcome to AcreditAid\";\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\nmodeTitle[AppMode.COURSES] = \"Courses\";\nmodeTitle[AppMode.COURSES_LOGCOURSE] = \"Log New Course\";\nmodeTitle[AppMode.COURSES_EDITCOURSE] = \"Edit Course\";\n\nconst modeToPage = {};\nmodeToPage[AppMode.LOGIN] = LoginPage;\nmodeToPage[AppMode.FEED] = FeedPage;\nmodeToPage[AppMode.ROUNDS] = Rounds;\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\nmodeToPage[AppMode.COURSES] = Courses;\nmodeToPage[AppMode.COURSES_LOGCOURSE] = Courses;\nmodeToPage[AppMode.COURSES_EDITCOURSE] = Courses;\n\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {mode: AppMode.LOGIN,\n                  menuOpen: false,\n                  authenticated: false,\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\n                  editAccount: false,\n                  showEditAccountDialog: false,\n                  statusMsg: \"\",\n                  showAboutDialog: false\n                 };\n  }\n\n  //componentDidMount\n  componentDidMount() {\n    if (!this.state.authenticated) { \n      //Use /auth/test route to (re)-test authentication and obtain user data\n      fetch(\"/auth/test\")\n        .then((response) => response.json())\n        .then((obj) => {\n          if (obj.isAuthenticated) {\n            this.setState({\n              userObj: obj.user,\n              authenticated: true,\n              mode: AppMode.FEED //We're authenticated so can get into the app.\n            });\n          }\n        }\n      )\n    } \n  }\n\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \n  //the database. The function calls the users/:userid (GET) route to update \n  //the userObj state var based on the latest database changes, and sets the \n  //mode state var is set to newMode. After this method is called, the\n  //App will re-render itself, forcing the new data to \n  //propagate to the child components when they are re-rendered.\n  refreshOnUpdate = async(newMode) => {\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\n    response = await response.json();\n    const obj = JSON.parse(response);\n    this.setState({\n      userObj: obj,\n      mode: newMode\n    });\n  }\n\n\n  handleChangeMode = (newMode) => {\n    this.setState({mode: newMode});\n  }\n\n  openMenu = () => {\n    this.setState({menuOpen : true});\n  }\n  \n  closeMenu = () => {\n    this.setState({menuOpen : false});\n  }\n\n  toggleMenuOpen = () => {\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\n  }\n\n  setUserId = (Id) => {\n    this.setState({userId: Id,\n                   authenticated: true});\n  }\n\n  showEditAccount = () => {\n    this.setState({showEditAccountDialog: true});\n\n  }\n\n  cancelEditAccount = () => {\n    this.setState({showEditAccountDialog: false});\n  }\n\n  //editAccountDone -- called after successful edit or\n  //deletion of user account. msg contains the status\n  //message and deleted indicates whether an account was\n  //edited (deleted == false) or deleted (deleted == true)\n  editAccountDone = (msg, deleted) => {\n    if (deleted) {\n      this.setState({showEditAccountDialog: false,\n                     statusMsg: msg,\n                     mode: AppMode.LOGIN});\n      } else {\n        this.setState({showEditAccountDialog: false,\n          statusMsg: msg});\n      }\n  }\n\n  closeStatusMsg = () => {\n    this.setState({statusMsg: \"\"});\n  }\n\n  render() {\n    const ModePage = modeToPage[this.state.mode];\n    return (\n      <div className=\"padded-page\">\n        {this.state.showAboutDialog ? \n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\n              <span>{this.state.statusMsg}</span>\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\n                  <span className=\"fa fa-times\"></span></button></div> : null}\n        {this.state.showEditAccountDialog ? \n            <CreateEditAccountDialog \n              create={false} \n              userId={this.state.userObj.id} \n              done={this.editAccountDone} \n              cancel={this.cancelEditAccount}/> : null}\n        <NavBar \n          title={modeTitle[this.state.mode]} \n          mode={this.state.mode}\n          changeMode={this.handleChangeMode}\n          menuOpen={this.state.menuOpen}\n          toggleMenuOpen={this.toggleMenuOpen}/>\n          <SideMenu \n            menuOpen = {this.state.menuOpen}\n            mode={this.state.mode}\n            toggleMenuOpen={this.toggleMenuOpen}\n            changeMode={this.handleChangeMode}\n            displayName={this.state.userObj.displayName}\n            profilePicURL={this.state.userObj.profilePicURL}\n            localAccount={this.state.userObj.authStrategy === \"local\"}\n            editAccount={this.showEditAccount}\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\n            showAbout={() => {this.setState({showAboutDialog: true})}}/>\n          <ModeBar \n            mode={this.state.mode} \n            changeMode={this.handleChangeMode}\n            menuOpen={this.state.menuOpen}/>\n          <ModePage \n            menuOpen={this.state.menuOpen}\n            mode={this.state.mode}\n            changeMode={this.handleChangeMode}\n            userObj={this.state.userObj}\n            refreshOnUpdate={this.refreshOnUpdate}/>\n      </div>\n    );  \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './styles/index.css';\nimport App from './components/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}