{"version":3,"sources":["images/wsu-logo-white.png","AppMode.js","components/common/NavBar.js","components/common/SideMenu.js","components/common/ModeBar.js","components/LoginPage/ConfirmDeleteAccount.js","components/LoginPage/CreateEditAccountDialog.js","components/LoginPage/ResetPasswordDialog.js","components/LoginPage/LookUpAccountDialog.js","components/LoginPage/SecurityQuestionDialog.js","components/LoginPage/LoginPage.js","components/common/Placeholder.js","components/FeedPage/FeedPage.js","components/RoundsPage/ConfirmDeleteRound.js","components/RoundsPage/RoundsTable.js","components/RoundsPage/RoundForm.js","components/common/FloatingButton.js","components/RoundsPage/Rounds.js","components/ProgramsPage/ProgramTable.js","components/ProgramsPage/ConfirmDeleteProgram.js","components/ProgramsPage/ProgramForm.js","components/ProgramsPage/Programs.js","components/CoursesPage/CoursesPage.js","components/common/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","PROGRAMS","PROGRAMS_LOGPROGRAM","PROGRAMS_EDITPROGRAM","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","logo","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","localAccount","editAccount","showAbout","logOut","ModeBar","ConfirmDeleteAccount","handleChange","match","emailRef","current","value","email","state","emailMatches","setState","createRef","focus","role","close","type","ref","onChange","deleteAccount","disabled","CreateEditAccountDialog","checkDataValidity","password","passwordRepeat","repeatPassRef","setCustomValidity","event","formUpdated","origAccountInfo","formIsUpdated","target","name","length","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","updateField","updateVal","securityQuestion","securityAnswer","setDefaultDisplayName","handleSubmit","a","preventDefault","userData","accountType","url","accountName","console","log","JSON","stringify","create","fetch","headers","method","body","res","status","done","text","resText","confirmDelete","confirmDeleteAccount","e","newUserRef","userId","json","parse","cancel","onSubmit","autocomplete","size","placeholder","pattern","required","onBlur","accept","profilePic","profilePicDataURL","rows","cols","maxLength","ResetPasswordDialog","resetPasswordRef","resetPasswordRepeatRef","resetPassword","errorMsg","checkForSubmit","code","cancelResetPassword","onKeyUp","LookUpAccountDialog","handleLookUpAccount","response","obj","authStrategy","getSecurityAnswer","ErrMsg","errMsg","SecurityQuestionDialog","securityAnswerRef","answer","getNewPassword","readOnly","question","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","statusMsg","accountCreateDone","msg","showCreateAccountDialog","cancelCreateAccount","resetUserId","resetQ","resetA","showLookUpAccountDialog","showSecurityQuestionDialog","showResetPaswordDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","pw","showResetPasswordDialog","deleted","closeStatusMsg","githubIcon","githubLabel","loginMsg","newAccountCreated","htmlFor","style","padding","fontSize","Placeholder","FeedPage","ConfirmDeleteRound","deleteRound","RoundsTable","editRound","setEditId","showConfirmDelete","setDeleteId","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","fontStyle","RoundForm","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","FloatingButton","handleClick","Rounds","addRound","newData","userObj","refreshOnUpdate","editId","_id","deleteId","val","closeErrorMsg","icon","ProgramTable","editProgram","p","programs","department","college","credits","courses","instructors","completion","ConfirmDeleteProgram","deleteProgram","ProgramForm","programData","saveProgram","thisProgram","Programs","addProgram","fetchData","i","CoursesPage","AboutBox","textAlign","modeTitle","modeToPage","App","handleChangeMode","newMode","openMenu","closeMenu","prevState","setUserId","Id","authenticated","showEditAccount","showEditAccountDialog","cancelEditAccount","editAccountDone","showAboutDialog","then","isAuthenticated","user","ModePage","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67cc6538.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wsu-logo-white.16be3b3b.png\";","/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    PROGRAMS: \"ProgramsMode\",\r\n    PROGRAMS_LOGPROGRAM: \"ProgramsMode-LogProgram\",\r\n    PROGRAMS_EDITPROGRAM: \"ProgramsMode-EditProgram\",\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport logo from '../../images/wsu-logo-white.png'\r\nimport AppMode from '../../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img className=\"wsu-logo\" src={logo} alt=\"WSU Logo\" height=\"38px\"\r\n      width=\"38px\"/>\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from '../../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          {this.props.localAccount ? \r\n            <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.editAccount}>\r\n              <span className=\"fa fa-user\"></span>&nbsp;Account</a> : null}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\" onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Feed</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Rounds</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteAccount extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {emailMatches: false};\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.emailRef.current.focus();\r\n    }\r\n\r\n    handleChange = () => {\r\n        const match = (this.emailRef.current.value === this.props.email);\r\n        if (match != this.state.emailMatches) {\r\n            this.setState({emailMatches: match});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Account Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete your account? <br />\r\n                 <i>This action cannot be undone.</i></p>\r\n              <label>\r\n                Confirm Email ({this.props.email}):\r\n                <br/>\r\n                <input \r\n                    className=\"form-center\"\r\n                    type=\"text\"\r\n                    ref={this.emailRef}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteAccount} disabled={!this.state.emailMatches}>\r\n                  Yes, Delete My Account</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteAccount;","import React from 'react';\r\nimport ConfirmDeleteAccount from './ConfirmDeleteAccount.js';\r\nimport confirmDeleteAccount from './ConfirmDeleteAccount.js';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.origAccountInfo = null;\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      password: \"\",\r\n                      accountType: \"Instructor\",\r\n                      passwordRepeat: \"\",\r\n                      securityQuestion: \"\",\r\n                      securityAnswer: \"\",\r\n                      formUpdated: false,\r\n                      confirmDelete: false};\r\n    } \r\n\r\n    //componentDidMount -- If we are editing an existing user account, we need to grab the data from\r\n    //the database and push them into the state.\r\n    async componentDidMount() {\r\n        if (!this.props.create) {\r\n            //obtain current user data from database and push into state\r\n            const url = \"/api/users/\" + this.props.userId;\r\n            const res = await fetch(url);\r\n            const json = await res.json();\r\n            const userData = JSON.parse(json);\r\n            this.origAccountInfo = userData; //This determines whether update can occur\r\n            this.origAccountInfo.passwordRepeat = userData.password;\r\n            this.setState({accountName: this.props.userId,\r\n                           displayName: userData.displayName,\r\n                           profilePicURL: userData.profilePicURL,\r\n                           password: userData.password,\r\n                           passwordRepeat: userData.password,\r\n                           securityQuestion: userData.securityQuestion,\r\n                           securityAnswer: userData.securityAnswer});\r\n        }\r\n    }\r\n\r\n    //checkDataValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We first check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    //Second, we check whether anything in the form changed from the original.\r\n    //If so, we update the 'formUpdated' state var, so that the form's submit\r\n    //button is enabled.\r\n    checkDataValidity = () => {\r\n        if (this.state.password != this.state.passwordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match password entered in previous field.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleChange--Called when a field in a dialog box form changes.\r\n    handleChange = (event) => {\r\n        const formUpdated = (this.origAccountInfo == null ? true : this.formIsUpdated(event.target.name,event.target.value));\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                               formUpdated: formUpdated},\r\n                               this.checkDataValidity);\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL:  this.result,\r\n                                   formUpdated: formUpdated},this.checkDataValidity);\r\n                });\r\n                \r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value,\r\n                           formUpdated: formUpdated},this.checkDataValidity);\r\n        }\r\n    } \r\n\r\n    //formisUpdated-- Checks whether any form data element has changed from the original. If so, \r\n    //returns true. Returns false otherwise. Note that in case of editing new account, always returns\r\n    //true since this.origAccountInfo is set to null.\r\n    //Should be called whenever the user makes a change to form data.\r\n    formIsUpdated = (updateField,updateVal) => {\r\n        if (this.origAccountInfo[updateField] != updateVal) {return true;}\r\n        if (updateField != \"displayName\" && \r\n             this.state.displayName != this.origAccountInfo.displayName) \r\n             {return true;}\r\n        if (updateField != \"profilePicURL\" && \r\n             this.state.profilePicURL != this.origAccountInfo.profilePicURL) \r\n             {return true;}\r\n        if (updateField != \"password\" &&\r\n            this.state.password !== this.origAccountInfo.password)\r\n            {return true;}\r\n        if (updateField != \"passwordRepeat\" &&\r\n            this.state.passwordRepeat !== this.origAccountInfo.passwordRepeat)\r\n            {return true;}\r\n        if (updateField != \"securityQuestion\" &&\r\n            this.state.securityQuestion !== this.origAccountInfo.securityQuestion)\r\n            {return true;}\r\n        if (updateField != \"securityAnswer\" &&\r\n            this.state.securityAnswer !== this.origAccountInfo.securityAnswer)\r\n            {return true;}\r\n        return false;\r\n    }\r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleSubmit -- Triggered when user clicks on submit button to\r\n    //either create or edit account.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleSubmit = async(event) => {\r\n        event.preventDefault();\r\n        //Initialize user account\r\n        let userData = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.password,\r\n            accountType: this.state.accountType,\r\n            securityQuestion: this.state.securityQuestion,\r\n            securityAnswer: this.state.securityAnswer\r\n        };\r\n        const url = '/api/users/' + this.state.accountName;\r\n        let res;\r\n        console.log(\"User data\", JSON.stringify(userData));\r\n        if (this.props.create) { //use POST route to create new user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'POST',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"New account created! Enter credentials to log in.\",false);\r\n            } else { //Unsuccessful account creation\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        } else { //use PUT route to update existing user account\r\n            res = await fetch(url, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                    },\r\n                method: 'PUT',\r\n                body: JSON.stringify(userData)}); \r\n            if (res.status == 200) { //successful account creation!\r\n                this.props.done(\"User Account Updated!\",false);\r\n            } else { //Unsuccessful account update\r\n                //Grab textual error message\r\n                const resText = await res.text();\r\n                this.props.done(resText,false);\r\n            }\r\n        }\r\n    }\r\n\r\n    //deleteAccount -- Called after confirms account deletion. \r\n    //Uses DELETE server route to perform server deletion. \r\n    //Calls on done with status message and\r\n    //true if delete was successful, false otherwise.\r\n    deleteAccount = async() => {\r\n       const url = '/api/users/' + this.state.accountName;\r\n       const res = await fetch(url, \r\n                    {method: 'DELETE'}); \r\n        if (res.status == 200) { //successful account deletion!\r\n            this.props.done(\"Account '\" + this.state.accountName + \"' has been deleted.\",true);\r\n        } else { //Unsuccessful account deletion\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.done(resText,false);\r\n        }\r\n        this.setState({confirmDelete: false});\r\n    }\r\n\r\n    //confirmDeleteAccount -- Called when user clicks on \"Delete Account...\"\r\n    //button to indicate intention to delete account. Presents the Confirm\r\n    //Delete dialog box.\r\n    confirmDeleteAccount = (e) => {\r\n        e.preventDefault();\r\n        this.setState({confirmDelete: true});\r\n    }\r\n\r\n    render() {\r\n    return (  \r\n    <div className=\"modal\" role=\"dialog\">\r\n    <div className=\"modal-dialog modal-lg\"></div>\r\n        <div className=\"modal-content form-center\">\r\n            <div className=\"modal-header\">\r\n              <h3><b>{this.props.create ? \"Create New Account\" : \"Edit Account\"}</b></h3>\r\n              <button className=\"modal-close\" \r\n                       onClick={this.props.cancel}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleSubmit}>\r\n            <label>\r\n                Email: \r\n                <input  \r\n                autocomplete=\"off\"\r\n                disabled={!this.props.create}\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Password:\r\n                <input\r\n                autocomplete=\"off\"\r\n                className=\"form-control form-text form-center\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.password}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"passwordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.passwordRepeat}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <select name=\"type\" value={this.state.type} className=\"form-control form-center\" onChange={this.handleChange}>\r\n                <option value=\"Instructor\">Instructor</option>\r\n                <option value=\"ABET Evaluator\">ABET Evaluator</option>\r\n                <option value=\"College Admin\">College Admin</option>\r\n            </select> \r\n            <br/>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleChange}\r\n                />\r\n                <img src={this.state.profilePicURL != \"\" ? \r\n                            this.state.profilePicURL :\r\n                            this.state.profilePicDataURL} \r\n                        height=\"60\" width=\"60\" \r\n                 />\r\n            </label> \r\n            <br/>\r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityQuestion}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"securityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.securityAnswer}\r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            {!this.props.create ?  \r\n            <button className=\"btn btn-small btn-danger\" onClick={this.confirmDeleteAccount}>\r\n                Delete Account...\r\n            </button> : null}\r\n            <br/><br/>\r\n            <button role=\"submit\" \r\n                disabled={!this.state.formUpdated}\r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className={this.props.create ? \"fa fa-user-plus\" : \"fa fa-user\"}></span>\r\n                &nbsp;{this.props.create ? \"Create Account\" : \"Update Account\"}\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        {this.state.confirmDelete ? \r\n          <ConfirmDeleteAccount email={this.state.accountName}\r\n                                deleteAccount={this.deleteAccount}\r\n                                close={() => (this.setState({confirmDelete: false}))}\r\n         /> : null}\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.resetPasswordRef = React.createRef();\r\n        this.resetPasswordRepeatRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleSubmit -- When the user submits the form, ensure that the passwords match.\r\n    //If so, call on resetPassword in parent component to actually reset the password.\r\n    //Otherwise, display an error message prompting the user to try again.\r\n    handleSubmit= (event) => {\r\n        event.preventDefault();\r\n        if (this.resetPasswordRef.current.value === this.resetPasswordRepeatRef.current.value) {\r\n            this.props.resetPassword(this.resetPasswordRef.current.value);\r\n        } else {\r\n            this.resetPasswordRepeatRef.current.focus();\r\n            this.setState({errorMsg: \"The passwords you entered do not match. Please try again.\"});\r\n        }\r\n    }\r\n\r\n    checkForSubmit = (e) => {\r\n        if (e.code === \"Enter\") {\r\n            e.preventDefault();\r\n            this.handleSubmit();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Reset Password</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Enter new password\"\r\n                pattern=\"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                        className=\"form-control form-text\"\r\n                        ref={this.resetPasswordRef}\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Repeat New Password: \r\n                        <input\r\n                        type=\"password\"\r\n                        placeholder=\"Repeat new password\"\r\n                        className=\"form-control form-text\"\r\n                        onKeyUp={this.checkForSubmit}\r\n                        ref={this.resetPasswordRepeatRef}\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                     className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-key\"></span>&nbsp;Reset Password\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );\r\n        \r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport AppMode from '../../AppMode.js';\r\n\r\nclass LookUpAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.emailRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //handleLookUpAccount: When the user clicks on the \"Look Up Account\" dialog box\r\n    //button, we check whether the account exists. If it does, we update the state,\r\n    //setting the resetEmail var to the email entered, hiding the current dialog box\r\n    //and showing the security question dialog box.\r\n    handleLookUpAccount = async(event) => {\r\n        event.preventDefault();\r\n        let response = await fetch(\"/users/\" + this.emailRef.current.value);\r\n        if (response.status == 200) {\r\n            const json = await response.json();\r\n            const obj = JSON.parse(json);\r\n            if (obj.authStrategy === \"local\") {\r\n                this.props.getSecurityAnswer(obj.id,obj.securityQuestion, obj.securityAnswer);\r\n            } else { //Account exists but was created through OAuth so password can't be reset \r\n                this.setState({ErrMsg: \"That account is authenticated through \" + obj.authStrategy + \". \" +\r\n                               \"Please log in to \" + obj.authStrategy + \" to reset the password.\"});\r\n            }\r\n        } else {\r\n            this.setState({errorMsg: \"Sorry, there is no account associated with '\" + this.emailRef.current.value + \"'.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Look Up Account</b></h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={() => {this.props.cancelResetPassword()}}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null}\r\n                    <form onSubmit={this.handleLookUpAccount}>\r\n                    <label>\r\n                        Account Email Address: \r\n                        <input\r\n                        ref={this.emailRef}\r\n                        className=\"form-control form-text\"\r\n                        type=\"email\"\r\n                        size=\"35\"\r\n                        placeholder=\"Enter Email Address\"\r\n                        pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                        ref={this.emailRef}\r\n                        required={true}\r\n                        />\r\n                    </label>\r\n                    <button type=\"submit\" \r\n                        className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-search\"></span>&nbsp;Look Up Account\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>  \r\n        );   \r\n    }\r\n\r\n}\r\n\r\nexport default LookUpAccountDialog;\r\n","import React from 'react';\r\n\r\nclass SecurityQuestionDialog extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.securityAnswerRef = React.createRef();\r\n        this.state = {errorMsg: \"\"};\r\n    }\r\n\r\n    //Focus cursor in email secrity answer field when mounted\r\n    componentDidMount() {\r\n        this.securityAnswerRef.current.focus();\r\n    }  \r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (this.securityAnswerRef.current.value === this.props.answer) {\r\n            this.props.getNewPassword();\r\n        } else {\r\n            this.securityAnswerRef.current.focus();\r\n            this.setState({errorMsg: \"Sorry, that is not the correct answer to the security question. Try again.\"});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"modal\" role=\"dialog\">\r\n              <div className=\"modal-dialog modal-lg\">\r\n                <div className=\"modal-content\">\r\n                  <div className=\"modal-header\">\r\n                    <h3 className=\"modal-title\"><b>Answer Security Question</b>\r\n                    </h3>\r\n                    <button className=\"modal-close\" \r\n                        onClick={this.props.cancelResetPassword}>\r\n                        &times;\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"modal-body\">\r\n                    {this.state.errorMsg != \"\" ? <p className=\"emphasis\">{this.state.errorMsg}</p> : null} \r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Security Question: \r\n                        <textarea\r\n                        readOnly={true}\r\n                        value={this.props.question}\r\n                        className=\"form-control form-text\"\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <label>\r\n                        Security Answer: \r\n                        <textarea\r\n                        className=\"form-control form-text\"\r\n                        placeholder=\"Enter Security Question Answer\"\r\n                        ref={this.securityAnswerRef}\r\n                        rows=\"3\"\r\n                        cols=\"35\"\r\n                        />\r\n                    </label>\r\n                    <button role=\"submit\" \r\n                      className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                        <span className=\"fa fa-check\"></span>&nbsp;Verify Answer\r\n                    </button>\r\n                    </form>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          );        \r\n    }\r\n}\r\n export default SecurityQuestionDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport LookUpAccountDialog from './LookUpAccountDialog.js';\r\nimport SecurityQuestionDialog from './SecurityQuestionDialog.js';\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {statusMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showLookUpAccountDialog: false,\r\n                  showSecurityQuestionDialog: false,\r\n                  showResetPaswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\",\r\n                  newAccountCreated: false\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     statusMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateDone -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateDone = (msg) => {\r\n      this.setState({statusMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//cancelResetPassword -- Called by one of the child three child dialog box components when\r\n//the user decides to cancel resetting their password. Toggles state so that all three\r\n//of the dialog boxes are hidden\r\ncancelResetPassword = () => {\r\n    this.resetUserId = \"\";\r\n    this.resetQ = \"\";\r\n    this.resetA = \"\";\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: false,\r\n                   showResetPaswordDialog: false});             \r\n}\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n//getSecurityAnswer: Given the id, security question, and security answer obtained\r\n//from the LookUpAccountDialog component, update state such that the user will\r\n//next be prompted to enter security question and answer for verification\r\ngetSecurityAnswer = (userId, question, answer) => {\r\n    this.resetUserId = userId;\r\n    this.resetQ = question;\r\n    this.resetA = answer;\r\n    this.setState({showLookUpAccountDialog: false,\r\n                   showSecurityQuestionDialog: true\r\n                });\r\n}\r\n\r\n//getNewPassword-- Called after user successfully provides correct answer\r\n//to security question. Presents the \"Reset Password\" dialog box.\r\ngetNewPassword = () => {\r\n    this.setState({showSecurityQuestionDialog: false,\r\n                    showResetPaswordDialog: true});\r\n}\r\n\r\n//resetPassword--Called after the user successfully enters a new (acceptable)\r\n//password. pw contains the new password. Call on the Update (PUT) server\r\n//route to update the user's password in the database.\r\nresetPassword = async(pw) => {\r\n    const url = \"/users/\" + this.resetUserId;\r\n    const res = await fetch(url, {\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n            },\r\n        method: 'PUT',\r\n        body: JSON.stringify({password: pw})}); \r\n    if (res.status == 200) { //successful update creation!\r\n        this.setState({showResetPaswordDialog: false,\r\n                       statusMsg: \"Password successfully reset!\"});\r\n    } else { //Unsuccessful account creation\r\n        //Grab textual error message\r\n        const resText = await res.text();\r\n        this.setState({showResetPasswordDialog: false,\r\n                      statusMsg: resText});\r\n    }\r\n    \r\n}\r\n\r\n//newAccountCreated -- Called after successful creation of a new account\r\naccountCreateDone = (msg,deleted) => {\r\n    this.setState({statusMsg: msg,\r\n                   showCreateAccountDialog: false});\r\n}\r\n\r\n//closeStatusMsg -- Called when user clicks on \"x\" to dismiss status message\r\ncloseStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n}\r\n\r\n//cancelCreateAccount -- called to hide Create Account dialog without creating acct\r\ncancelCreateAccount = () => {\r\n    this.setState({showCreateAccountDialog: false});\r\n}\r\n\r\n  render() {\r\n    return(\r\n        <div>\r\n        <center>\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.statusMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n            {this.state.showLookUpAccountDialog ? \r\n              <LookUpAccountDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   getSecurityAnswer={this.getSecurityAnswer}/> : null}\r\n            {this.state.showSecurityQuestionDialog ? \r\n               <SecurityQuestionDialog cancelResetPassword={this.cancelResetPassword}\r\n                                       question={this.resetQ}\r\n                                       answer={this.resetA}\r\n                                       getNewPassword={this.getNewPassword}/> : null}\r\n            {this.state.showResetPaswordDialog ? \r\n              <ResetPasswordDialog cancelResetPassword={this.cancelResetPassword}\r\n                                   resetPassword={this.resetPassword} /> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showLookUpAccountDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog\r\n                create={true} \r\n                done={this.accountCreateDone}\r\n                cancel={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass Placeholder extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 > Placeholder </h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://brand.wsu.edu/wp-content/themes/brand/images/pages/logos/wsu-signature-vertical.svg\" />\r\n            </center>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Placeholder;","import React from 'react';\r\nimport Placeholder from '../common/Placeholder.js'\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Placeholder/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteRound extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Round Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this round?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteRound;","import React from 'react';\r\nimport ConfirmDeleteRound from './ConfirmDeleteRound.js';\r\nimport AppMode from '../../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //deleteRound -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ?\r\n        <ConfirmDeleteRound \r\n          close={() => this.setState({showConfirmDelete: false})} \r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from '../../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from '../../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from '../common/FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\"};           \r\n    }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.setState({errorMsg: \"\"});\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.deleteId]._id;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\nimport AppMode from '../../AppMode.js';\r\n\r\nclass ProgramTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editProgram -- Triggered when the user clicks the edit button for a given\r\n  //program. The id param is the unique property that identifies the program.\r\n  //Set the state variable representing the id of the program to be edited and\r\n  //then switch to the PROGRAMS_EDITPROGRAM mode to allow the user to edit the\r\n  //chosen program.\r\n  editProgram = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.PROGRAMS_EDITPROGRAM);\r\n  }\r\n\r\n  //renderTable -- render an HTML table displaying the programs logged\r\n  //by the current user and providing buttons to view/edit and delete each program.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let p = 0; p < this.props.programs.length; ++p) {\r\n    table.push(\r\n      <tr key={p}>\r\n        <td>{this.props.programs[p].name}</td>\r\n        <td>{this.props.programs[p].department}</td>\r\n        <td>{this.props.programs[p].college}</td>\r\n        <td>{this.props.programs[p].credits}</td>\r\n        <td>{this.props.programs[p].courses}</td>\r\n        <td>{this.props.programs[p].instructors}</td>\r\n        <td>{this.props.programs[p].completion} %</td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editProgram(p)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire program table with header, displaying a \"No\r\n  //Programs Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Department</th>\r\n          <th>College</th>\r\n          <th>Credits</th>\r\n          <th>Courses</th>\r\n          <th>Instructors</th>\r\n          <th>Completion</th>\r\n          <th>View/Edit...</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.programs).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"8\" style={{fontStyle: \"italic\"}}>No programs created</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProgramTable;\r\n","import React from 'react';\r\n\r\nclass ConfirmDeleteProgram extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <center>\r\n                <h3 className=\"modal-title\"><b>Confirm Program Deletion</b></h3>\r\n              </center>\r\n               <button id=\"modalClose\" className=\"modal-close\" onClick={this.props.close}>\r\n                 &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <p>Do you really want to delete this program?</p>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                  <button className=\"btn btn-danger\" onClick={this.props.deleteProgram}>\r\n                  Yes, Delete</button>\r\n                  <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                  No, Cancel</button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteProgram;","import React from 'react';\r\nimport ConfirmDeleteProgram from './ConfirmDeleteProgram.js';\r\nimport AppMode from '../../AppMode.js';\r\n\r\nclass ProgramForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if (this.props.mode === AppMode.PROGRAMS_LOGPROGRAM) {\r\n      //If logging a new program, the starting state is a default program with\r\n      this.state = {name:  \"\", \r\n                    department: \"\",\r\n                    college: \"\",\r\n                    credits: \"\",\r\n                    faIcon: \"fa fa-save\",\r\n                    btnLabel: \"Save Program Data\"}\r\n    } else {\r\n      //if editing an existing program, the starting state is the program's\r\n      //current data\r\n      let thisProgram = {...this.props.startData};\r\n      // delete thisProgram.id;\r\n      thisProgram.faIcon = \"fa fa-edit\";\r\n      thisProgram.btnLabel = \"Update Program Data\";\r\n      this.state = thisProgram;\r\n    }\r\n  }\r\n  \r\n  \r\n  handleChange = (event) => {\r\n      const name = event.target.name;\r\n      this.setState({[name]: event.target.value});\r\n  }\r\n\r\n\r\n  //handleSubmit -- When the user clicks on the button to save/update the\r\n  //program, start the spinner and invoke the parent component's saveProgram\r\n  //method to do the actual work. Note that saveProgram is set to the correct\r\n  //parent method based on whether the user is logging a new program or editing\r\n  //an existing program.\r\n  handleSubmit = (event) => {\r\n      //start spinner\r\n      this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                      btnLabel: (this.props.mode === AppMode.PROGRAMS_LOGPROGRAM ? \r\n                                  \"Saving...\" : \"Updating...\")});\r\n      //Prepare current program data to be saved\r\n      let programData = {};\r\n      programData.department = this.state.department;\r\n      programData.college = this.state.college;\r\n      programData.credits = this.state.credits;\r\n      delete programData.faIcon;\r\n      delete programData.btnLabel;\r\n      //call saveProgram on 1 second delay to show spinning icon\r\n      setTimeout(this.props.saveProgram,1000,this.state.name, programData); \r\n      event.preventDefault(); \r\n      }\r\n\r\n  //deleteProgram -- Triggered when the user clicks on the \"Yes, Delete\"\r\n  //button in the Confirm Delete dialog box. It executes the deletion and\r\n  //closes the dialog box.\r\n  deleteProgram = () => {\r\n    this.props.deleteProgram();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given program. The id paam is the unique property that \r\n  //identifies the program. Set the state variable representing the id\r\n  //of the program to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }        \r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"padded-page\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Name:\r\n              <input name=\"name\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.name} onChange={this.handleChange} required={true}\r\n                placeholder=\"Program name\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n            <p></p>\r\n\r\n            <label>\r\n              Department:\r\n              <input name=\"department\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.department} onChange={this.handleChange} required={true}\r\n                placeholder=\"Program department\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n            <p></p>\r\n\r\n            <label>\r\n              College:\r\n              <input name=\"college\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.college} onChange={this.handleChange} required={true}\r\n                placeholder=\"Program college\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n            <p></p>\r\n\r\n            <label>\r\n              # Credits:\r\n              <input name=\"credits\" className=\"form-control form-center\" type=\"number\"\r\n                value={this.state.credits} onChange={this.handleChange} required={true}\r\n                placeholder=\"0\" min=\"0\" max=\"999\" />\r\n            </label>\r\n            <p></p>\r\n\r\n            <p></p>\r\n            <button type=\"submit\" style={{width: \"40%\",fontSize: \"36px\"}} \r\n              className=\"btn btn-primary btn-color-theme\">\r\n                <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n            </button>\r\n            <button type=\"button\" style={{width: \"40%\",fontSize: \"36px\"}} \r\n              className=\"btn btn-primary btn-color-theme\"\r\n              onClick={this.props.menuOpen ? null : () => \r\n              this.confirmDelete(this.state.name)}>\r\n                <span className=\"fa fa-times\">Delete Program</span></button>\r\n          </center>\r\n        </form>\r\n        {this.state.showConfirmDelete ?\r\n          <ConfirmDeleteProgram \r\n            close={() => this.setState({showConfirmDelete: false})} \r\n            deleteProgram={this.deleteProgram} /> : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProgramForm;","//Programs -- A parent component for the app's \"programs\" mode.\r\n//Manages the programs data for the current user and conditionally renders the\r\n//appropriate program mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from '../../AppMode.js';\r\nimport ProgramTable from './ProgramTable.js';\r\nimport ProgramForm from './ProgramForm.js';\r\nimport FloatingButton from '../common/FloatingButton.js';\r\n\r\nclass Programs extends React.Component {\r\n\r\n    //Initialize a Programs object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.deleteId = \"\";\r\n        this.editId = \"\";\r\n        this.state = {errorMsg: \"\", programs: []};           \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData();\r\n    }\r\n\r\n    async fetchData() {\r\n        const url = '/api/programs/';\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'GET'}); \r\n        if (res.status != 200) {\r\n            const msg = await res.text();\r\n            this.setState({errorMsg: msg});\r\n        } else {\r\n            const msg = await res.json();\r\n            let programs = JSON.parse(msg);\r\n            this.setState({errorMsg: \"\"});\r\n            // console.log(programs)\r\n            for(var i = 0; i < programs.length; i++)\r\n            {\r\n                programs[i].courses = 0;\r\n                programs[i].instructors = 0;\r\n                programs[i].completion = 0;\r\n            }\r\n            // console.log(programs)\r\n            this.setState({programs: programs})\r\n            //console.log(res.json())\r\n        }\r\n    }\r\n\r\n    //addProgram -- Given an object newData containing a new program, use the \r\n    //server POST route to add the new program to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Programs table. Then switch\r\n    //the mode back to AppMode.PROGRAMS since the user is done adding a program.\r\n    addProgram = async (name, newData) => {\r\n        const url = '/api/programs/' + name;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 201) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.PROGRAMS);\r\n        } else {\r\n            this.setState({errorMsg: msg});\r\n            await this.fetchData();\r\n            this.props.changeMode(AppMode.PROGRAMS);\r\n        }\r\n    }\r\n\r\n    //editProgram -- Given an object newData containing updated data on an\r\n    //existing program, update the current user's program in the database. \r\n    //toggle the mode back to AppMode.PROGRAMS since the user is done editing the\r\n    //program. \r\n    editProgram = async (name, newData) => {\r\n        const url = '/api/programs/' + name;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: msg});\r\n            this.props.changeMode(AppMode.PROGRAMS);\r\n        } else {\r\n            this.setState({errorMsg: msg});\r\n            await this.fetchData();\r\n            this.props.changeMode(AppMode.PROGRAMS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteProgram -- Delete the current user's program uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteProgram = async () => {\r\n        const url = '/api/programs/' + this.deleteId;\r\n        const res = await fetch(url, {method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            this.setState({errorMsg: \"An error occurred when attempting to delete program from database: \" \r\n            + msg});\r\n            this.props.changeMode(AppMode.PROGRAMS);\r\n        } else {\r\n            await this.fetchData();\r\n            this.props.changeMode(AppMode.PROGRAMS);\r\n        }  \r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.deleteId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.editId = val;\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n\r\n    closeErrorMsg = () => {\r\n        this.setState({errorMsg: \"\"});\r\n    }\r\n    \r\n    //render -- Conditionally render the Programs mode page as either the programs\r\n    //table, the programs form set to obtain a new program, or the program form set\r\n    //to edit an existing program.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.PROGRAMS:\r\n                return (\r\n                    <>\r\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\r\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\r\n                          <span className=\"fa fa-times\"></span>\r\n                        </button></div>: null}\r\n                    <ProgramTable \r\n                        programs={this.state.programs}\r\n                        setEditId={this.setEditId}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.PROGRAMS_LOGPROGRAM)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.PROGRAMS_LOGPROGRAM:\r\n                return (\r\n                    <ProgramForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveProgram={this.addProgram} \r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteProgram={this.deleteProgram}/>\r\n                );\r\n            case AppMode.PROGRAMS_EDITPROGRAM:\r\n                let thisProgram = {...this.state.programs[this.editId]};\r\n                return (\r\n                    <ProgramForm\r\n                        mode={this.props.mode}\r\n                        startData={thisProgram} \r\n                        saveProgram={this.editProgram} \r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteProgram={this.deleteProgram}/>\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Programs;\r\n","import React from 'react';\r\nimport Placeholder from '../common/Placeholder.js';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Placeholder/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\nrender() {\r\n    return (\r\n        <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h3>About AcreditAid app</h3>\r\n                <button className=\"modal-close\" onClick={this.props.close}>\r\n                    &times;\r\n                </button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n                <img\r\n                src=\"https://brand.wsu.edu/wp-content/themes/brand/images/pages/logos/wsu-signature-vertical.svg\"\r\n                height=\"200\" width=\"200\"/>\r\n                <p>Version CptS 489 Fa20 Complete (MERN)</p>\r\n                <div style={{textAlign: \"left\"}}>\r\n                    <p> University degree programs typically seek accreditation from a recognized accreditation board. By ensuring that the degree program meets a set of established standards, such accreditation gives a degree program credibility in the eyes of the potential employers of its graduates. </p>\r\n                    <p> The AccreditAid application is intended to help university degree programs manage the process of acquiring ABET accreditation. There are at least three processes that can be facilitated through AccreditAid: </p>\r\n                    <ul>\r\n                        <li> Collecting and presenting display materials for each required course in a degree program. </li>\r\n                        <li> Identifying student work samples for assessment in targeted courses and facilitating the collaborative process of assessing those work samples against targeted SOs; </li>\r\n                        <li> Collecting, managing and analyzing additional sources of assessment data. </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n                <button className=\"btn btn-primary btn-color-theme\"\r\n                onClick={this.props.close}>OK</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport NavBar from './common/NavBar.js';\r\nimport SideMenu from './common/SideMenu.js';\r\nimport ModeBar from './common/ModeBar.js';\r\nimport CreateEditAccountDialog from './LoginPage/CreateEditAccountDialog.js'\r\nimport LoginPage from './LoginPage/LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage/FeedPage.js';\r\nimport Rounds from './RoundsPage/Rounds.js';\r\nimport Programs from './ProgramsPage/Programs.js'\r\nimport CoursesPage from './CoursesPage/CoursesPage.js';\r\nimport AboutBox from './common/AboutBox.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to AcreditAid\";\r\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.PROGRAMS] = \"Programs\";\r\nmodeTitle[AppMode.PROGRAMS_LOGPROGRAM] = \"Create New Program\";\r\nmodeTitle[AppMode.PROGRAMS_EDITPROGRAM] = \"Edit Program\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.PROGRAMS] = Programs\r\nmodeToPage[AppMode.PROGRAMS_LOGPROGRAM] = Programs\r\nmodeToPage[AppMode.PROGRAMS_EDITPROGRAM] = Programs\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  editAccount: false,\r\n                  showEditAccountDialog: false,\r\n                  statusMsg: \"\",\r\n                  showAboutDialog: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.PROGRAMS //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  showEditAccount = () => {\r\n    this.setState({showEditAccountDialog: true});\r\n\r\n  }\r\n\r\n  cancelEditAccount = () => {\r\n    this.setState({showEditAccountDialog: false});\r\n  }\r\n\r\n  //editAccountDone -- called after successful edit or\r\n  //deletion of user account. msg contains the status\r\n  //message and deleted indicates whether an account was\r\n  //edited (deleted == false) or deleted (deleted == true)\r\n  editAccountDone = (msg, deleted) => {\r\n    if (deleted) {\r\n      this.setState({showEditAccountDialog: false,\r\n                     statusMsg: msg,\r\n                     mode: AppMode.LOGIN});\r\n      } else {\r\n        this.setState({showEditAccountDialog: false,\r\n          statusMsg: msg});\r\n      }\r\n  }\r\n\r\n  closeStatusMsg = () => {\r\n    this.setState({statusMsg: \"\"});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div className=\"padded-page\">\r\n        {this.state.showAboutDialog ? \r\n          <AboutBox close={() => this.setState({showAboutDialog: false})}/> : null}\r\n        {this.state.statusMsg != \"\" ? <div className=\"status-msg\">\r\n              <span>{this.state.statusMsg}</span>\r\n              <button className=\"modal-close\" onClick={this.closeStatusMsg}>\r\n                  <span className=\"fa fa-times\"></span></button></div> : null}\r\n        {this.state.showEditAccountDialog ? \r\n            <CreateEditAccountDialog \r\n              create={false} \r\n              userId={this.state.userObj.id} \r\n              done={this.editAccountDone} \r\n              cancel={this.cancelEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n        <SideMenu \r\n          menuOpen = {this.state.menuOpen}\r\n          mode={this.state.mode}\r\n          toggleMenuOpen={this.toggleMenuOpen}\r\n          displayName={this.state.userObj.displayName}\r\n          profilePicURL={this.state.userObj.profilePicURL}\r\n          localAccount={this.state.userObj.authStrategy === \"local\"}\r\n          editAccount={this.showEditAccount}\r\n          logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n          showAbout={() => {this.setState({showAboutDialog: true})}}/>\r\n        <ModeBar \r\n          mode={this.state.mode} \r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}/>\r\n        <ModePage \r\n          menuOpen={this.state.menuOpen}\r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          userObj={this.state.userObj}\r\n          refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}